/** Looping on all querys in the querysArray object and requesting on the database.
 *  callback (err, result) with result being an array containing all the results.
 *  Closing the database object.
 */
function parallelOnArray(db,querysArray, querysParams, callback) {

    if (querysArray.length !== querysParams.length) {
        var myError = new Error('The number of querys does not equal the number of parameters set');
        callback(myError, null);
    }
    else {
        //Counting the number of querys returned
        var count = 0;
        //Storing our results
        var allresults = [];

        db.parallelize(function() {
            querysArray.forEach(function(myQuery, index) {
                db.all(myQuery, querysParams[index], function(err, rows) {
                    count++;
                    if (rows) {
                        //!!! Only taking the first row for now
                        var row = rows[0];
                        allresults[index] = row;
                    }
                    else {
                        console.log(err);
                    }
                    if (index == querysArray.length) {
                        //Got all our results
                        callback(null, allresults);
                    }
                });
            });
        });
    }
    db.close();
}


/** Helper function to populate 2 arrays from the calling_language parameter
 * The callinglanguage parameters must hold the querys property which hold 2 properties querys and nbr:
 * 
 calling_language = {
     querys: {
         name1: {
             query: 'xxxx',
             nbr: 'xxxx'
         },
         name2: {
             query: 'yyyy',
             nbr: 'yyyyy'
         }
         ....
     }
     ......
 
 */
function buildQueryAndParamsArray(calling_language,rowid) {

    if (!calling_language.querys) {
        return;
    }
    var allQuerysAndParams = Object.keys(calling_language.querys);

    this.querysArray = [];
    this.querysParams = [];
    //Map tracking the index with the property of the querys object {name1:0,name2:0,....}
    this.map={};
    
    var that=this;

    allQuerysAndParams.forEach(function(oneQueryAndParam,index) {
        if (oneQueryAndParam.query && oneQueryAndParam.nbr) {
            that.map[index]=oneQueryAndParam;
            that.querysArray.push(calling_language.querys[oneQueryAndParam].query);
            that.querysParams.push(fillArray(rowid,calling_language.querys[oneQueryAndParam].nbr));
        }
    });
    console.log(this.map);
}

/* Helper function creating an array of n identic elements */
function fillArray(value, len) {

    var arr = [];
    for (var i = 0; i < len; i++) {
        arr.push(value);
    }
    return arr;
}

module.exports={
    buildQueryAndParamsArray:buildQueryAndParamsArray,
    
    parallelOnArray:parallelOnArray
    
};