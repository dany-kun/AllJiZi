/** Looping on all querys in the querysArray object and requesting on the database.
 *  callback (err, result) with result being an array containing all the results.
 *  Closing the database object.
 */
function parallelOnArray(querysArray, querysParams, callback) {

    if (querysArray.length !== querysParams.length) {
        var myError = new Error('The number of querys does not equal the number of parameters set');
        callback(myError, null);
    }
    else {
        //Counting the number of querys returned
        var count = 0;
        //Storing our results
        var allresults = [];

        db.parallelize(function() {
            querysArray.forEach(function(myQuery, index) {
                db.all(myQuery, querysParams[index], function(err, rows) {
                    count++;
                    if (rows) {
                        //!!! Only taking the first row for now
                        var row = rows[0];
                        allresults[index] = row;
                    }
                    else {
                        console.log(err);
                    }
                    if (index == querysArray.length) {
                        //Got all our results
                        callback(null, allresults);
                    }
                });
            });
        });
    }
    db.close();
}

/** !!!! This function does not close the database
 * Method doing a 'all' query on the db and calling the callback on the results
 * db: database on which the query is done
 * queryobj: object containing 2 strings: query: query with identic arguments, nbr: number of occurrences of the arguments
 * myparam: parameter to be queried in the main table
 * callback: callback function returning an error or all the result
 */
function queryDb(queryobj, param, callback) {
    
    //Error object has no query
    if (!queryobj.query) {
        callback('The query object does not have any query property: ' + JSON.stringify(queryobj), null);
    }
    //Eroor object has no arguments
    else if (!queryobj.nbr) {
        callback('The query object does not have any nbr property: ' + JSON.stringify(queryobj), null);
    }
    else if (!db){
        callback('No database initialized', null);
    }
    else {
        //Query string with '?'
        var query = queryobj.query;
        //Parameters array
        var args = fillArray(param, queryobj.nbr);

        db.all(query, args, function(err, rows) {
            if (err) {
                callback(err, null);
            }
            else {
                callback(null, rows);
            }
        });
    }

}
