/** Looping on all querys in the querysArray object and requesting on the database.
 *  callback (err, result) with result being an array containing all the results ordered in the same order as querysArray.
 *  Closing the database object.
 */
function parallelOnArray(db,querysArray, querysParams, callback) {

    if (querysArray.length !== querysParams.length) {
        var myError = new Error('The number of querys does not equal the number of parameters set');
        callback(myError, null);
    }
    else {
        //Counting the number of querys returned
        var count = 0;
        //Storing our results
        var allresults = [];

        db.parallelize(function() {
            querysArray.forEach(function(myQuery, index) {
                db.all(myQuery, querysParams[index], function(err, rows) {
                    count++;
                    if (rows) {
                        //!!! Only taking the first row for now
                        var row = rows[0];
                        
                        allresults[index] = row;
                    }
                    else {
                        console.log(err);
                    }
                    if (count === querysArray.length) {
                        //Got all our results
                        callback(null, allresults);
                    }
                });
            });
        });
    }
    db.close();
}


/** Helper function to populate 2 arrays from the calling_language parameter
 * The callinglanguage parameters must hold the querys property which hold at least the 3 properties querys, nbr and name:
 * 
 * calling_language = {
 *    querys: {
 *        name1: {
 *            query: 'xxxx',
 *            nbr: 'xxxx',
 *            name:'zzzzz'
 *        },
 *        name2: {
 *            query: 'yyyy',
 *            nbr: 'yyyyy'
 *            name:'yyyy'
 *        }
 *        ....
 *    }
 *    ......
 */
function buildQueryAndParamsArray(calling_language,rowid,callback) {
    
    if (!(calling_language.hasOwnProperty('querys'))) {
        console.log('No querys object to do the query');
        return;
    }
    
    var querysArray = [];
    var querysParams = [];
    //Map tracking the index with the property of the querys object {2:name1,1:name2,....}
    var map={};
    var index=0;
    
    for (var oneQueryAndParamKeys in calling_language.querys){
        var oneQueryAndParam=calling_language.querys[oneQueryAndParamKeys];
        if (oneQueryAndParam.hasOwnProperty('query') && oneQueryAndParam.hasOwnProperty('nbr') && oneQueryAndParam.hasOwnProperty('name')) {
            map[index]=oneQueryAndParam.name;
            querysArray.push(oneQueryAndParam.query);
            querysParams.push(fillArray(rowid,oneQueryAndParam.nbr));
            index++;
        }
    }
    
    return {querysArray:querysArray,querysParams:querysParams,map:map};
}

/* Helper function creating an array of n identic elements */
function fillArray(value, len) {

    var arr = [];
    for (var i = 0; i < len; i++) {
        arr.push(value);
    }
    return arr;
}

module.exports={
    buildQueryAndParamsArray:buildQueryAndParamsArray,
    
    parallelOnArray:parallelOnArray
    
};