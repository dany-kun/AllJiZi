/** Custom API to access data from the database */

var fs=require('fs');
var sqlite3=require("sqlite3").verbose();


var dbpath,mode,db;


/**
 * Basic function trying to open the database; return the database object on success
 * 
*/
function openDb(dbpath,mode){
    var exists = fs.existsSync(dbpath);
    if (exists){
        try{
            db = new sqlite3.Database(dbpath,mode);
        }
        catch (err){
            console.log('Could not open database: ' + err);
        }
    }
    else{
        console.log('Could not open database: file does not exists');
    }
}


/** !!!! This function does not close the database
 * Method doing a 'all' query on the db and calling the callback on the results
 * db: database on which the query is done
 * queryobj: object containing 2 strings: query: query with identic arguments, nbr: number of occurrences of the arguments
 * myparam: parameter to be queried in the main table
 * callback: callback function returning an error or all the result
 */
function queryDb(queryobj, param, callback) {
    
    //Error object has no query
    if (!queryobj.query) {
        callback('The query object does not have any query property: ' + JSON.stringify(queryobj), null);
    }
    //Eroor object has no arguments
    else if (!queryobj.nbr) {
        callback('The query object does not have any nbr property: ' + JSON.stringify(queryobj), null);
    }
    else if (!db){
        callback('No database initialized', null);
    }
    else {
        //Query string with '?'
        var query = queryobj.query;
        //Parameters array
        var args = fillArray(param, queryobj.nbr);

        db.all(query, args, function(err, rows) {
            if (err) {
                callback(err, null);
            }
            else {
                callback(null, rows);
            }
        });
    }

}


/* Helper function creating an array of n identic elements */
function fillArray(value, len) {

    var arr = [];
    for (var i = 0; i < len; i++) {
        arr.push(value);
    }
    return arr;
}


/** !!!!/ This function need to close the database
 * Looping on the calling_language querys properties to fetch queries and do it on the database
 * rowid: parameter sent to the queries (argument)
 * callback: function returining a set of result (first row of every result)
*/

var getNewSet=function(calling_language, rowid, callback) {

    if (!db) {
        callback('No database initialized', null);
        return;
    }
    if (!calling_language) {
        callback('Undefined object', null);
        return;
    }
    
    if (!calling_language.querys) {
        callback('Missing querys property on: ' + JSON.stringify(calling_language), null);
        return;
    }

    else {
    
        var index=0;
        var allresults={};
        
        var queryArray=Object.keys(calling_language.querys);
        
        
        db.parallelize(function() {
            queryArray.forEach(function(querylangbase) {
                var querylang = calling_language.querys[querylangbase];


                if (!querylang) {
                    callback('Missing ' + querylangbase + ' property on:' + calling_language.querys);
                }
                else {
                    queryDb(querylang, rowid, function(err, rows) {
                        index++;
                         if (rows) {
                             var row=rows[0];
                                allresults[querylang.name] = row;
                         }
                         else{
                             console.log(err);
                         }
                         if (index == queryArray.length) {
                            console.log('Got all chars');
                            callback(allresults);
                         }
                    });
                }
            });
        });
        db.close();
    }
};

module.exports={
    //Opening the database in read-only mode
    initReadOnly:function(path){
        openDb(path,sqlite3.OPEN_READONLY);
    },
    //Get a new set of data
    getNewSet:getNewSet
    ,
    searchChar:function(querybj,param,callback){
        queryDb(querybj,param,callback);
        db.close();
    }
};